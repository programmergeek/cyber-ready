// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    environment   AssignedLab[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id   String @id @default(cuid())
    name String
    lab  Lab[]
}

model Lab {
    id          String        @id @default(cuid())
    description String        @db.VarChar(5000)
    dueDate     DateTime
    categoryId  String
    category    Category      @relation(fields: [categoryId], references: [id])
    task        Task[]
    environment AssignedLab[]
}

model Task {
    id          String  @id @default(cuid())
    taskNumber  Int
    instruction String  @db.VarChar(5000)
    isCompleted Boolean @default(false)
    answer      String  @db.VarChar(5000)
    labId       String
    hint        String  @db.VarChar(5000)
    lab         Lab     @relation(fields: [labId], references: [id])
}

model AssignedLab {
    id          String       @id
    labId       String
    userId      String
    state       LabState     @default(NotStarted)
    lab         Lab          @relation(fields: [labId], references: [id])
    user        User         @relation(fields: [userId], references: [id])
    environment Environment?
}

model Environment {
    id         String      @id
    assignedTo String      @unique
    ipAddress  String
    assignLab  AssignedLab @relation(fields: [assignedTo], references: [id])
}

enum LabState {
    NotStarted
    Incomplete
    Complete
    Overdue
}
